#! /usr/bin/env bash

#####
# Alice M.
# www.alicem.net
# github.com/alice-mm/shellcheckw
#####

# Wrapper for ShellCheck. See the ReadMe file of the repository.


# ===== Configuration

# Path to shellcheck, or just the program's name if it is in your $PATH.
# You can add arguments in the array, too.
unset -v SHELLCHECK
declare -r SHELLCHECK=(shellcheck)

declare -r SHELLCHECK_FORMAT=gcc

# Codes of messages that must be disabled.
unset -v SHELLCHECK_EXCLUDE
declare -r SHELLCHECK_EXCLUDE=(
    # ShellCheck often thinks we want expansion to happen in
    # strings that do not even contain “$(foo)” nor “$bar” and
    # tries to force us to use double quotes in places where it would
    # force us to escape boatloads of things.
    SC2016
    
    # “note: Prefer explicit -n to check non-empty string
    # (or use =/-ne to check boolean/integer).”
    # Their logic to issue this note is that users not familiar with
    # the language will not understand that well, but c'mon, I don't
    # see why the “-n” version would be more easy to understand.
    # The guy will end up checking the manual or something anyway.
    # The simple fact that the message tells stuff about “booleans”
    # make me want to ignore that note since “real” booleans do not
    # even exist in Bash.
    SC2244
)

SCRDIR=$(readlink -f -- "$(dirname "$0")")
readonly SCRDIR


# ===== Dependencies check

# Names of constants that hold necessary programs.
unset -v DEPS
declare -r DEPS=(
    SHELLCHECK
)

unset -v must_exit
for constname in "${DEPS[@]}"
do
    if ! type "${!constname}" &> /dev/null
    then
        printf '%s: The command %q mentioned by the configuration constant %q was not found. Please install this program or change the configuration of %q.\n' \
                "$(basename "$0")" "${!constname}" "$constname" "$(basename "$0")" >&2
        must_exit=1
    fi
done

if [ "$must_exit" ]
then
    exit 3
fi


# ===== Arguments check

if [ -z "$1" ]
then
    printf '%s: Error: No input file.\n' "$(basename "$0")" >&2
    exit 1
fi

if [ ! -f "$1" ] || [ ! -r "$1" ]
then
    printf '%s: Error: Input file %q is not a normal file or cannot be read.\n' \
            "$(basename "$0")" "$1" >&2
    exit 2
fi


# ===== Functions

. "$SCRDIR"/shellcheckw_functions.sh || exit


# ===== Main

unset -v exclusion_args
exclusion_args=()
for code in "${SHELLCHECK_EXCLUDE[@]}"
do
    exclusion_args+=(
        -e "$code"
    )
done

status=0
output=$(
    "${SHELLCHECK[@]}" --format "$SHELLCHECK_FORMAT" "${exclusion_args[@]}" <(
        preprocess_script "$1"
    ) 2>&1
) ||
status=$?

if [ "$output" ]
then
    printf '\n  === %q ===\n\n' "$1"
    sed "s/^[^:]*://" <<< "$output"
fi

exit "$status"
